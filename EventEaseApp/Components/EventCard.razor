@inject EventService EventService
@inject ParticipantService ParticipantService
@inject ParticipantState ParticipantState
@inject ILogger<EventCard> Logger

<article class="event-card">

    <EditForm Model="EventModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-0">
                @if (isEditing)
                {
                    <InputText @bind-Value="EventModel.Name" class="form-control" />
                }
                else
                {
                    @EventModel.Name
                }
            </h4>
            @if (IsEditable && !isEditing)
            {
                <button @onclick="EnableEdit" class="btn btn-secondary ml-2">Edit</button>
            }
        </div>

        <p>
            @if (isEditing)
            {
                <InputTextArea @bind-Value="EventModel.Description" class="form-control" />
            }
            else
            {
                @EventModel.Description
            }
        </p>
        <p>
            <strong>Date:</strong>
            @if (isEditing)
            {
                <InputDate @bind-Value="EventModel.Date" class="form-control" />
            }
            else
            {
                @EventModel.Date.ToString("MM/dd/yyyy")
            }
        </p>
        @if (DisplayShort)
        {
            <a href="/eventdetail/@EventModel.Id" class="btn btn-primary">View Details</a>
        }
        else
        {
            <p>
                <strong>Location:</strong>
                @if (isEditing)
                {
                    <InputText @bind-Value="EventModel.Location" class="form-control" />
                }
                else
                {
                    @EventModel.Location
                }
            </p>
            <p>
                <strong>End Date:</strong>
                @if (isEditing)
                {
                    <InputDate @bind-Value="EventModel.EndDate" class="form-control" />
                }
                else
                {
                    @EventModel.EndDate
                }
            </p>
            <p><strong>Created At:</strong> @EventModel.CreatedAt</p>
        }
        @if (isEditing)
        {
            <button type="submit" class="btn btn-success">Submit</button>
        }
    </EditForm>

    @if (ParticipantState.SelectedParticipant != null)
    {
        <button @onclick="ToggleParticipantSignIn" class="btn btn-primary mt-2">
            @(IsParticipantSignedIn() ? "Sign Out" : "Sign In")
        </button>
    }
    @if (!DisplayShort)
    {
        <ParticipantListComponent EventModel="EventModel" />
    }
</article>

@code {
    [Parameter]
    public EventModel EventModel { get; set; } = new EventModel();

    [Parameter]
    public bool DisplayShort { get; set; }

    [Parameter]
    public bool IsEditable { get; set; }

    private bool isEditing { get; set; }

   protected async override Task OnInitializedAsync()
    {
        isEditing = false;
        await ParticipantService.LoadParticipantsAsync();
    }
    private void HandleValidSubmit()
    {
        // Handle the form submission, e.g., save the event data
        Console.WriteLine("Form submitted successfully!");
        isEditing = false;
    }

    private void EnableEdit()
    {
        isEditing = true;
    }

    private void ToggleParticipantSignIn()
    {
        Logger.LogInformation("Toggling participant sign-in status");
        var participant = ParticipantState.SelectedParticipant;
        if (participant != null)
        {
            Logger.LogInformation("Participant: {Participant}", participant);
            if (IsParticipantSignedIn())
            {
                EventModel.Participants.Remove(participant);
            }
            else
            {
                EventModel.Participants.Add(participant);
            }
        }
    }

    private bool IsParticipantSignedIn()
    {
        var participant = ParticipantState.SelectedParticipant;
        Logger.LogInformation("Checking if participant is signed in: {Participant}", participant.LastName);
        var result = participant != null && EventModel.Participants.Any() && EventModel.Participants.Contains(participant);
        Logger.LogInformation("Participant signed in: {Result}", result);
        return participant != null && EventModel.Participants.Any() && EventModel.Participants.Contains(participant);
    }
}
